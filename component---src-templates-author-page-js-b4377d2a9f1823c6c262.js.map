{"version":3,"sources":["webpack://gatsby-starter-hello-world/./src/components/Tag.js","webpack://gatsby-starter-hello-world/./src/components/postCard.js","webpack://gatsby-starter-hello-world/./src/sprite-gen/HSV.js","webpack://gatsby-starter-hello-world/./src/sprite-gen/Sprite.js","webpack://gatsby-starter-hello-world/./src/components/user-avatar.js","webpack://gatsby-starter-hello-world/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://gatsby-starter-hello-world/./src/components/user.js","webpack://gatsby-starter-hello-world/./src/components/user.module.css","webpack://gatsby-starter-hello-world/./src/templates/author-page.js"],"names":["Tag","name","to","css","rhythm","PostCard","id","slug","title","excerpt","authors","key","map","user","frontmatter","username","HSV","h","s","v","this","toRGB","hsv2rgb","f","n","k","Math","max","min","Sprite","spriteSize","exportSize","iterations","initGrid","image","DEBUG","init","update","rndColor","countNeighborhood","y","x","spriteGrid","previous","grow","prev","current","cell","i","j","growCount","random","console","log","printGrid","baseColor","bgColor","grid2image","str","floor","getImage","ratio","round","sqrt","offset","posGap","retImage","posY","posX","posMirrorX","getDataURL","canvas","ctx","getContext","imgData","createImageData","pixelIdx","val","r","g","b","data","putImageData","toDataURL","UserAvatar","url","attrs","source","excluded","target","sourceKeys","Object","keys","length","indexOf","useState","finalUrl","setFinalUrl","canvasRef","useRef","useEffect","b64","ref","height","width","style","display","EXPORT_SIZE","src","alt","User","props","className","avatar","AuthorPage","author","markdownRemark","posts","allMarkdownRemark","edges","e","node","dangerouslySetInnerHTML","__html","html","post","fields"],"mappings":"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","file":"component---src-templates-author-page-js-b4377d2a9f1823c6c262.js","sourcesContent":["import React from 'react';\r\nimport { css } from \"@emotion/react\"\r\n// import { Link } from \"gatsby\"\r\nimport { rhythm } from \"../utils/typography\"\r\nimport { Link } from 'gatsby';\r\n\r\nexport const Tag = ({ name }) => (\r\n    \r\n    <Link\r\n        to={ `/tag/${name}` } \r\n        css={css`\r\n            margin-right: ${rhythm(1 / 4)};\r\n            background: #333;\r\n            padding: 4px 12px;\r\n            border-radius: 15px;\r\n            font-size: 16px;\r\n            text-decoration: none; \r\n            background-image: none; \r\n            text-shadow: none;\r\n            color: #eaeaea;\r\n        `}\r\n    >\r\n        { name }\r\n    </Link>\r\n    \r\n)","import React from \"react\"\r\nimport { css } from \"@emotion/react\"\r\nimport { Link } from \"gatsby\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nexport const PostCard = ({ id, slug, title = \"No title\", excerpt = \"\", authors = [] }) => {\r\n  return (\r\n    <div key={id}>\r\n      <Link\r\n        to={slug}\r\n        css={css`\r\n          text-decoration: none;\r\n          color: inherit;\r\n        `}\r\n      >\r\n        <h3\r\n          css={css`\r\n            margin-bottom: ${rhythm(1 / 4)};\r\n          `}\r\n        >\r\n          {title}{\" \"}\r\n          <span\r\n            css={css`\r\n              color: #555;\r\n            `}\r\n          >\r\n            â€” {(authors || []).map(user => user && <span>{user.frontmatter.username}</span>)}\r\n          </span>\r\n        </h3>\r\n        <p>{excerpt}</p>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","export class HSV {\r\n\r\n    constructor(h, s, v){\r\n      this.h = h;\r\n      this.s = s;\r\n      this.v = v;\r\n    }\r\n  \r\n    toRGB(){\r\n      return HSV.hsv2rgb(this.h, this.s, this.v);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * input: h in [0,360] and s,v in [0,1] - output: r,g,b in [0,1]\r\n   */\r\n  HSV.hsv2rgb = function hsv2rgb(h,s,v) {                              \r\n    let f= (n,k=(n+h/60)%6) => v - v*s*Math.max( Math.min(k,4-k,1), 0);     \r\n    return [f(5),f(3),f(1)];       \r\n  }","import { HSV } from \"./HSV.js\";\r\n\r\nexport class Sprite {\r\n\r\n  constructor(spriteSize = 10, exportSize = 80, iterations = 2) {\r\n    this.spriteSize = spriteSize;\r\n    this.exportSize = exportSize;\r\n    this.initGrid();\r\n    this.image = null;\r\n    this.DEBUG = false;\r\n\r\n    this.init(iterations);\r\n    this.update(this.rndColor, new HSV(0, 0, 0.3));\r\n  }\r\n\r\n  countNeighborhood(y, x) {\r\n    let n = 0;\r\n\r\n    if (y >= 1) {\r\n        n += this.spriteGrid[y - 1][x].previous;\r\n    }\r\n    if (y <= this.spriteSize - 2) {\r\n        n += this.spriteGrid[y + 1][x].previous;\r\n    }\r\n    if (x >= 1) {\r\n        n += this.spriteGrid[y][x - 1].previous;\r\n    }\r\n    if (x <= this.spriteSize / 2 - 2) {\r\n        n += this.spriteGrid[y][x + 1].previous;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  grow() {\r\n    for (let y = 1; y < this.spriteSize - 1; ++y) {\r\n        for (let x = 1; x < this.spriteSize / 2; ++x) {\r\n            const prev = this.spriteGrid[y][x].previous;\r\n            const n = this.countNeighborhood(y, x);\r\n            this.spriteGrid[y][x].current = (prev == false && n <= 1) || (prev == true && (n == 2 || n == 3));\r\n        }\r\n    }\r\n    for (let row of this.spriteGrid) {\r\n      for(let cell of row){\r\n        cell.previous = cell.current;\r\n      }\r\n    }\r\n  }\r\n\r\n  initGrid(){\r\n    this.spriteGrid = [];\r\n    for(let i = 0; i < this.spriteSize; ++i){\r\n      this.spriteGrid[i] = [];\r\n      for(let j = 0; j < this.spriteSize / 2; ++j){\r\n        this.spriteGrid[i][j] = { previous: false, current: false }\r\n      }\r\n    }\r\n  }\r\n\r\n  init(growCount) {\r\n    for (let y = 1; y < this.spriteSize - 1; ++y) {\r\n      for (let x = 1; x < this.spriteSize / 2; ++x) {\r\n          this.spriteGrid[y][x] = { previous: !!(Math.random() < 0.5), current: false };\r\n        }\r\n    }\r\n    this.rndColor = new HSV(360 * Math.random(), 0.6, 0.6 + (0.8 - 0.6)*Math.random());\r\n    for (let i = 0; i < growCount; ++i) {\r\n      if(this.DEBUG){\r\n        console.log(`===================[Iter ${i}]===================`)\r\n        this.printGrid();\r\n      }\r\n      this.grow();\r\n    }\r\n  }\r\n\r\n  update(baseColor, bgColor) {\r\n    this.image = this.grid2image(this.exportSize, baseColor, bgColor);\r\n  }\r\n\r\n  printGrid(){\r\n    let str = \"\";\r\n    for (let y = 0; y < this.spriteSize; ++y) {\r\n      for (let x = 0; x < this.spriteSize / 2; ++x) {\r\n        str += this.spriteGrid[y][x].previous ? 'o' : '.'\r\n      }\r\n      for (let x = 0; x < this.spriteSize / 2; ++x) {\r\n        str += this.spriteGrid[y][Math.floor(this.spriteSize / 2 - x - 1)].previous ? 'o' : '.'\r\n      }\r\n      str += \"\\n\";\r\n    }\r\n    console.log(str)\r\n  }\r\n\r\n  getImage(){\r\n    return this.image;\r\n  }\r\n\r\n  grid2image(exportSize, baseColor, bgColor) {\r\n    const ratio = Math.round(exportSize / this.spriteSize / Math.sqrt(2));\r\n\r\n    const offset = Math.floor((exportSize - this.spriteSize * ratio) / 2);\r\n    const posGap = exportSize % 2;\r\n\r\n    // Prepare img array\r\n    const retImage = []\r\n    for(let x = 0; x < exportSize; ++x){\r\n      retImage[x] = [];\r\n      for(let y = 0; y < exportSize; ++y){\r\n        retImage[x][y] = bgColor;\r\n      }\r\n    }\r\n\r\n    for (let y = 0; y < this.spriteSize * ratio; ++y) {\r\n        for (let x = 0; x < this.spriteSize * ratio / 2; ++x) {\r\n            const posY = offset + y;\r\n            const posX = offset + x;\r\n            const posMirrorX = exportSize - (posX + 1) - posGap;\r\n            if (this.spriteGrid[Math.floor(y / ratio)][Math.floor(x / ratio)].previous) {\r\n                retImage[posY][posX] = retImage[posY][posMirrorX] = baseColor;\r\n            }\r\n            else if (this.countNeighborhood(Math.floor(y / ratio), Math.floor(x / ratio))) {\r\n                retImage[posY][posX] = retImage[posY][posMirrorX] = new HSV(baseColor.h - 15, baseColor.s, baseColor.v * 0.4);\r\n            }\r\n        }\r\n    }\r\n\r\n    return retImage;\r\n  }\r\n\r\n  getDataURL(canvas){\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const imgData = ctx.createImageData(this.exportSize, this.exportSize);\r\n\r\n    for(let y = 0; y < this.exportSize; ++y){\r\n      for(let x = 0; x < this.exportSize; ++x){\r\n        const pixelIdx = (y * this.exportSize + x) * 4;\r\n        const [ r, g, b ] = this.image[y][x].toRGB().map(val => Math.floor(val * 255));\r\n        imgData.data[pixelIdx] = r;\r\n        imgData.data[pixelIdx + 1] = g;\r\n        imgData.data[pixelIdx + 2] = b;\r\n        imgData.data[pixelIdx + 3] = 255;\r\n      }\r\n    }\r\n\r\n    ctx.putImageData(imgData, 0, 0);\r\n    const base64 = canvas.toDataURL();\r\n    return base64;\r\n  }\r\n\r\n\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Sprite } from '../sprite-gen/Sprite';\r\n\r\nconst SPRITE_SIZE = 10;\r\nconst EXPORT_SIZE = 96;\r\nconst ITERATIONS = 5;\r\n\r\nexport const UserAvatar = ({ url, ...attrs }) => {\r\n    const [finalUrl, setFinalUrl] = useState(url);\r\n    const canvasRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if((!url || url == '') && canvasRef.current){\r\n            const sprite = new Sprite(SPRITE_SIZE, EXPORT_SIZE, ITERATIONS);\r\n            const b64 = sprite.getDataURL(canvasRef.current);\r\n            setFinalUrl(b64);\r\n        }\r\n    }, [url]);\r\n\r\n    return (\r\n        <>\r\n        <canvas ref={canvasRef} height={EXPORT_SIZE} width={EXPORT_SIZE} style={{display: 'none', width: EXPORT_SIZE+'px', height: EXPORT_SIZE+'px'}}/>\r\n        <img src={finalUrl} {...attrs} alt=\"\" />\r\n        </>\r\n    )\r\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\r\nimport { UserAvatar } from './user-avatar';\r\nimport * as styles from \"./user.module.css\"\r\n\r\nexport const User = props => (\r\n    <div className={styles.user}>\r\n        <UserAvatar url={props.avatar} className={styles.avatar} />\r\n        <div className={styles.description}>\r\n        <h2 className={styles.username}>{props.username}</h2>\r\n        { props.excerpt && <p className={styles.excerpt}>{props.excerpt}</p> }\r\n        </div>\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nexport const user = \"user-module--user--3vK3v\";\nexport const avatar = \"user-module--avatar--X5dpJ\";\nexport const description = \"user-module--description--2GISF\";\nexport const username = \"user-module--username--1f4Sw\";\nexport const excerpt = \"user-module--excerpt--1bOlM\";","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport { User } from \"../components/user\";\r\nimport { PostCard } from \"../components/postCard\";\r\nimport { Tag } from \"../components/Tag\";\r\nimport * as styles from \"./keyword-post.module.css\"\r\n\r\nexport default function AuthorPage({ data }) {\r\n    const author = data.markdownRemark;\r\n    const posts = data.allMarkdownRemark.edges?.map(e => e.node) || [];\r\n    console.log(posts);\r\n    return (\r\n        <Layout>\r\n            <div>\r\n                <User\r\n                    username={author.frontmatter.username}\r\n                    avatar={author.frontmatter.avatar} />\r\n                <div className=\"post-content\">\r\n                    <div dangerouslySetInnerHTML={{ __html: author.html }} />\r\n                </div>\r\n                <div className=\"post-meta\">\r\n                    { posts.length > 0 && (\r\n                        <>\r\n                        <h3>Articles de cet auteur</h3>\r\n                        <div className=\"related\">\r\n                            {posts.map(post => (post && \r\n                                <PostCard \r\n                                    key={post.id}\r\n                                    id={post.id} \r\n                                    slug={post.fields.slug} \r\n                                    title={post.frontmatter.title} \r\n                                    excerpt={post.excerpt} \r\n                                    authors={post.frontmatter.authors}/>\r\n                            ))}\r\n                        </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!, $username: String!) {\r\n    markdownRemark(\r\n        fields: { slug: { eq: $slug } }\r\n    ) {\r\n      html\r\n      frontmatter {\r\n        username\r\n        avatar \r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n        filter: {frontmatter: {authors: {elemMatch: {frontmatter: {username: {eq: $username}}}}}, fileAbsolutePath: {regex: \"/src\\\\/keywords-docs/\"}}\r\n      ) {\r\n        edges {\r\n          node {\r\n            id\r\n            frontmatter {\r\n                title\r\n                authors {\r\n                    frontmatter {\r\n                        username\r\n                    }\r\n                }\r\n            }\r\n            fields {\r\n                slug\r\n            }\r\n            excerpt\r\n          }\r\n        }\r\n      }\r\n  }\r\n`"],"sourceRoot":""}